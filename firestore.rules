rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to get user's role
    function getUserRole(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.role;
    }

    // Helper function to check if the user is an admin or editor
    function isEditorOrAdmin() {
      let userRole = getUserRole(request.auth.uid);
      return userRole == 'admin' || userRole == 'editor';
    }

    // Helper function to check if the user is an admin
    function isAdmin() {
      return getUserRole(request.auth.uid) == 'admin';
    }

    // Users collection rules
    match /users/{userId} {
      // Any authenticated user can create their own user document (on signup)
      // but cannot define their own role.
            allow create: if request.auth.uid == userId && request.resource.data.role == 'viewer';
      
      // Users can read their own data. Admins can read anyone's data.
      allow get: if request.auth.uid == userId || isAdmin();
      allow list: if isAdmin();
      
      // Users can update their own non-role data. Admins can update anyone's role, but not their own.
      allow update: if (request.auth.uid == userId && !('role' in request.resource.data)) || 
                      (isAdmin() && request.auth.uid != userId);
                      
      // Only admins can delete users (and not themselves).
      allow delete: if isAdmin() && request.auth.uid != userId;
    }

    // Products, Categories, Suppliers: Read for all, Write for Editors/Admins
    match /{collection}/{docId} where collection in ['products', 'categories', 'suppliers'] {
      allow read: if request.auth != null;
      allow write: if isEditorOrAdmin();
    }

    // Movements: Read for all, Create for Editors/Admins, no updates/deletes to preserve audit trail
    match /movements/{movementId} {
      allow read: if request.auth != null;
      allow create: if isEditorOrAdmin();
      allow update, delete: if false; // Protect audit trail
    }

    // Counts: Read for all, Create/Update for Editors/Admins
    match /counts/{countId} {
      allow read: if request.auth != null;
      allow create, update: if isEditorOrAdmin();
      allow delete: if isAdmin(); // Only admins can delete count histories
    }
  }
}
